'''
1.
进程
    可以实现多任务 任务是在进程自带的线程上执行的
    cpu负担高每个进程都会自己创建一份独立的数据 内存 代码
    进程之间的切换负担重 每次切换都要重新调度上述所有的资源
    进程能更好地利用cpu多核

2.
线程
    可以实现多任务 cpu的调度单位是线程
    cpu负担较小 所有线程都共享一份独立的数据
    线程之间的切换负担小
    因为GIL锁问题 利用cpu多核没有进程发达

总结 进程能充分利用cpu多核 线程上下文切换更高效

cpu密集型 任务运算要求高 cpu占有率高

I/o 密集型 任务中含有大量的读写 输入 输出
处理硬盘 和 网络资源时候IO切换效率高








'''